# -*- generated by 1.0.12 -*-
import da
PatternExpr_226 = da.pat.TuplePattern([da.pat.ConstantPattern('request'), da.pat.FreePattern('c2'), da.pat.FreePattern('p')])
PatternExpr_252 = da.pat.TuplePattern([da.pat.ConstantPattern('release'), da.pat.FreePattern(None), da.pat.FreePattern('p')])
PatternExpr_311 = da.pat.TuplePattern([da.pat.ConstantPattern('done')])
PatternExpr_316 = da.pat.BoundPattern('_BoundPattern318_')
PatternExpr_319 = da.pat.TuplePattern([da.pat.FreePattern(None), da.pat.TuplePattern([da.pat.FreePattern(None), da.pat.FreePattern(None), da.pat.BoundPattern('_BoundPattern325_')]), da.pat.TuplePattern([da.pat.ConstantPattern('done')])])
PatternExpr_401 = da.pat.TuplePattern([da.pat.ConstantPattern('done'), da.pat.BoundPattern('_BoundPattern404_')])
PatternExpr_407 = da.pat.TuplePattern([da.pat.FreePattern(None), da.pat.TuplePattern([da.pat.FreePattern(None), da.pat.FreePattern(None), da.pat.FreePattern(None)]), da.pat.TuplePattern([da.pat.ConstantPattern('done'), da.pat.BoundPattern('_BoundPattern417_')])])
_config_object = {'channel': 'fifo', 'clock': 'lamport'}
import sys

class P(da.DistProcess):

    def __init__(self, procimpl, props):
        super().__init__(procimpl, props)
        self._PReceivedEvent_2 = []
        self._events.extend([da.pat.EventPattern(da.pat.ReceivedEvent, '_PReceivedEvent_0', PatternExpr_226, sources=None, destinations=None, timestamps=None, record_history=None, handlers=[self._P_handler_225]), da.pat.EventPattern(da.pat.ReceivedEvent, '_PReceivedEvent_1', PatternExpr_252, sources=None, destinations=None, timestamps=None, record_history=None, handlers=[self._P_handler_251]), da.pat.EventPattern(da.pat.ReceivedEvent, '_PReceivedEvent_2', PatternExpr_311, sources=[PatternExpr_316], destinations=None, timestamps=None, record_history=True, handlers=[])])

    def setup(self, s, nrequests, **rest_423):
        super().setup(s=s, nrequests=nrequests, **rest_423)
        self._state.s = s
        self._state.nrequests = nrequests
        self._state.q = set()

    def run(self):

        def task():
            self.output('in cs')
        for i in range(self._state.nrequests):
            self.mutex(task)
        self.send(('done', self._id), to=self.parent())
        super()._label('_st_label_308', block=False)
        _st_label_308 = 0
        while (_st_label_308 == 0):
            _st_label_308 += 1
            if PatternExpr_319.match_iter(self._PReceivedEvent_2, _BoundPattern325_=self.parent(), SELF_ID=self._id):
                _st_label_308 += 1
            else:
                super()._label('_st_label_308', block=True)
                _st_label_308 -= 1
        self.output('terminating')

    def mutex(self, task):
        super()._label('request', block=False)
        c = self.logical_clock()
        self.send(('request', c, self._id), to=self._state.s)
        self._state.q.add(('request', c, self._id))
        self.output(('queue is: ' + str(self._state.q)))
        super()._label('critical_section', block=False)
        task()
        super()._label('release', block=False)
        self._state.q.remove(('request', c, self._id))
        self.send(('release', self.logical_clock(), self._id), to=self._state.s)

    def _P_handler_225(self, c2, p):
        self._state.q.add(('request', c2, p))
        self.send(('ack', self.logical_clock(), self._id), to=p)
    _P_handler_225._labels = None
    _P_handler_225._notlabels = None

    def _P_handler_251(self, p):
        for x in {('request', c, p) for (_ConstantPattern268_, c, _BoundPattern271_) in self._state.q if (_ConstantPattern268_ == 'request') if (_BoundPattern271_ == p)}:
            self._state.q.remove(x)
            break
    _P_handler_251._labels = None
    _P_handler_251._notlabels = None

class Node_(da.NodeProcess):

    def __init__(self, procimpl, props):
        super().__init__(procimpl, props)
        self._Node_ReceivedEvent_0 = []
        self._events.extend([da.pat.EventPattern(da.pat.ReceivedEvent, '_Node_ReceivedEvent_0', PatternExpr_401, sources=None, destinations=None, timestamps=None, record_history=True, handlers=[])])

    def run(self):
        nprocs = (int(sys.argv[1]) if (len(sys.argv) > 1) else 10)
        nrequests = (int(sys.argv[2]) if (len(sys.argv) > 2) else 1)
        ps = self.new(P, num=nprocs)
        for p in ps:
            self._setup(p, ((ps - {p}), nrequests))
        self._start(ps)
        super()._label('_st_label_393', block=False)
        p = None

        def UniversalOpExpr_394():
            nonlocal p
            for p in ps:
                if (not PatternExpr_407.match_iter(self._Node_ReceivedEvent_0, _BoundPattern417_=p)):
                    return False
            return True
        _st_label_393 = 0
        while (_st_label_393 == 0):
            _st_label_393 += 1
            if UniversalOpExpr_394():
                _st_label_393 += 1
            else:
                super()._label('_st_label_393', block=True)
                _st_label_393 -= 1
        self.send(('done',), to=ps)
