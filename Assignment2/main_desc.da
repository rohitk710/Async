import sys

config(channel is fifo, clock is lamport)

#test change

# Defininig process here: class p (process): followed by process body
class P(process):
	# setup is a special method for initially setting up the data in the process before execution starts. Kinda like method constructor
	def setup(s:set, nrequests:int):
		# A special vairble self refers to the process itself. used as a prefix to declare variable which can later be used without it.
		self.q = set();

	# Method definitions by default have self.
	def mutex(task):
		# -- are yield  point. It speci􏰀es that point in the program as a place where control yields to handling of un-handled messages, if any, and resumes afterwards.
		
		-- request
		# A call logical_time() returns the current value of the logical clock.
		c = logical_clock();
		
		# Notation =x means a value that is equal to the value of variable x; it is equivalent to using a fresh variable y in its place and adding a test y=x before x is used.
		send(('request', c, self), to= s)
		
		q.add(('request', c, self))
		

		output('queue is: '+str(q))
		#each(v1 in sexp1 , ..., vk in sexpk , has = bexp ) some(v1 in sexp1 , ..., vk in sexpk , has = bexp )
		#await(each(('request', c2, p) in q,
		#			has= (c2, p)==(c, self) or (c, self) < (c2, p)) and
		#		each(p in s, has= some(received(('ack', c2, _p)), has= c2 > c)))

		-- critical_section
		task();

		--release
		q.remove(('request', c, self))
		send(('release', logical_clock(), self), to= s)


	# def receive(msg = mexp, from_ = pexp, at = (l1, ..., lj)): handler_body. The from and at clauses are optional; the defaults are any process and all yield points.
	def receive(msg= ('request', c2, p)):
		q.add(('request', c2, p))
		
		# Histories of message sent and received by a process are kept in variables sent and received. Sequence sent is updated at each send statement, by adding each message sent to a process.
		send(('ack', logical_clock(), self), to= p)

	# An underscore (_) matches anything
	def receive(msg= ('release', _, p)):
		# a previously bound variable is indicated with pre􏰀x = .in Python syntax: _ is used in place of = to indicate previously bound variables.
		# setof(exp, v1 in sexp1 , ..., vk in sexpk , bexp).  Returns the set of values of exp for all combination of values of variables that satisfy all member clauses Vi in sexpi and condition bexp.
		for x in setof(('request', c, p), ('request', c, _p) in q):
			q.remove(x)
			break
 
	# Special method for carrying out the main flow of execution
	def run():
		def task():
			output('in cs')
		for i in range(nrequests):
			mutex(task)

		# sends the message that is value of expression mexp to the process or set of processes that is the value of expression pexp. send mexp to pexp. in python: send(mexp, to = pexp).
		# Channels can also be con􏰀gured separately for messages from certain types of processes to certain types of processes, by adding clauses from ps and to qs, or arguments from_ = ps and to = qs in Python
		# where ps and qs can be a type of processes or a set of types of processes
		send(('done', self), to= parent())

		# _ is added after from because from is a reserved word in Python.
		# Received messages can be handled synchronously, using await statements. An await statement must be preceded by a yield point, for handling messages while waiting;
		await(received(('done',), from_=parent()))
		output('terminating')


def main():
	nprocs = int(sys.argv[1]) if len(sys.argv) > 1 else 10
	nrequests = int(sys.argv[2]) if len(sys.argv) > 2 else 1

	# This is how a process is created. new(p, num = n, at = node_exp) where at can be machine name where it is running of form name@host. except for p rest all is optional.
	ps = new(P, num=nprocs)
	# setup statement sets up the processes setup(ps, (args)).
	for p in ps: setup(p, (ps-{p}, nrequests))
	# start starts the execution of the method run of the process or set of processes. start(ps)
	start(ps)
	await(each(p in ps, has=received(('done', p))))
	send(('done',), to=ps)