import sys
controller = import_da('controller')

class P(process, controller.Controllee):
    def setup(ctl, s:set, nrequests:int):
        super().setup(ctl)
        self.q = set()
        self.timedOut = 0
        self.minimumTimeStamp = 100


    # Step1: To request the resource, process Pi sends the message Tm:Pi requests resource to every other process, 
    # and puts that message on its request queue, where Tm is the timestamp of the message.
    
    def request():
        -- request
        c = logical_clock()
        send(('request', c, self), to= s)
        q.add(('request', c , self))
        cs()

    def receive(msg= ('request', c2, p)):
        q.add(('request', c2, p))
        send(('ack', logical_clock(), self), to= p)

    def cs():
        -- cs
        minimumTimeStamp = 100
        for (tag, c, p2) in q:
            if(tag == 'request' and p2==self and c < minimumTimeStamp):
                minimumTimeStamp = c;
        c = minimumTimeStamp
        if await(each(('request', c2, p)in q, has= (c2,p)==(c, self) or (c,self) < (c2, p)) and each(p in s, has= some(received(('ack', c2, _p)), has= c2 > c))):
            output('In CS of process: ' + str(self) + ' with timestamp : '+ str(c))
            release()
        elif timeout(15):
            timedOut = timedOut + 1
            output ('Timed out for process: ' + str(self))        


    def release():
        -- release
        minimumTimeStamp = 100
        for (tag, c, p2) in q:
            if(tag == 'request' and p2==self and c < minimumTimeStamp):
                minimumTimeStamp = c;
        c = minimumTimeStamp
        q.remove(('request', c, self))
        send(('release', logical_clock(), self), to= s)

    def receive(msg= ('release', c, p)):
        minimumTimeStamp = 100
        for (tag, c, p2) in q:
            if(tag == 'request' and p2==p and c < minimumTimeStamp):
                minimumTimeStamp = c;
        c = minimumTimeStamp
        for x in setof(('request', c, p), ('request', c2, p2) in q):
            q.remove(x)
            break

    @controller.run
    def run():
        for i in range(nrequests):
            request()
            


def main():
    nprocs = int(sys.argv[1]) if len(sys.argv) > 1 else 10
    nrequests = int(sys.argv[2]) if len(sys.argv) > 2 else 10

    config(channel= 'fifo', clock= 'Lamport')

    ctl = new(controller.Controller, num= 1)
    setup(ctl, (nprocs,))
    start(ctl)

    ps = new(P, num= nprocs)
    for p in ps: setup(p, (ctl, ps-{p}, nrequests))
    start(ps)