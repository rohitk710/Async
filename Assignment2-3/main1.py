# -*- generated by 1.0.12 -*-
import da
PatternExpr_216 = da.pat.TuplePattern([da.pat.ConstantPattern('request'), da.pat.FreePattern('c2'), da.pat.FreePattern('p')])
PatternExpr_307 = da.pat.TuplePattern([da.pat.ConstantPattern('ack'), da.pat.FreePattern('c2'), da.pat.BoundPattern('_BoundPattern311_')])
PatternExpr_393 = da.pat.TuplePattern([da.pat.ConstantPattern('release'), da.pat.FreePattern('c'), da.pat.FreePattern('p')])
PatternExpr_452 = da.pat.TuplePattern([da.pat.ConstantPattern('done')])
PatternExpr_457 = da.pat.BoundPattern('_BoundPattern459_')
PatternExpr_460 = da.pat.TuplePattern([da.pat.FreePattern(None), da.pat.TuplePattern([da.pat.FreePattern(None), da.pat.FreePattern(None), da.pat.BoundPattern('_BoundPattern466_')]), da.pat.TuplePattern([da.pat.ConstantPattern('done')])])
PatternExpr_548 = da.pat.TuplePattern([da.pat.ConstantPattern('ack'), da.pat.FreePattern('c2'), da.pat.BoundPattern('_BoundPattern552_')])
PatternExpr_592 = da.pat.TuplePattern([da.pat.ConstantPattern('request'), da.pat.FreePattern('c2'), da.pat.FreePattern('p')])
PatternExpr_618 = da.pat.TuplePattern([da.pat.ConstantPattern('release'), da.pat.FreePattern(None), da.pat.FreePattern('p')])
PatternExpr_677 = da.pat.TuplePattern([da.pat.ConstantPattern('done')])
PatternExpr_682 = da.pat.BoundPattern('_BoundPattern684_')
PatternExpr_685 = da.pat.TuplePattern([da.pat.FreePattern(None), da.pat.TuplePattern([da.pat.FreePattern(None), da.pat.FreePattern(None), da.pat.BoundPattern('_BoundPattern691_')]), da.pat.TuplePattern([da.pat.ConstantPattern('done')])])
PatternExpr_728 = da.pat.TuplePattern([da.pat.ConstantPattern('request'), da.pat.FreePattern('c2'), da.pat.FreePattern('p')])
PatternExpr_753 = da.pat.TuplePattern([da.pat.ConstantPattern('release'), da.pat.BoundPattern('_BoundPattern756_'), da.pat.BoundPattern('_BoundPattern757_')])
PatternExpr_786 = da.pat.TuplePattern([da.pat.ConstantPattern('ack'), da.pat.BoundPattern('_BoundPattern789_'), da.pat.BoundPattern('_BoundPattern790_')])
PatternExpr_818 = da.pat.TuplePattern([da.pat.ConstantPattern('request'), da.pat.FreePattern('c'), da.pat.FreePattern('p')])
PatternExpr_869 = da.pat.TuplePattern([da.pat.ConstantPattern('done'), da.pat.BoundPattern('_BoundPattern872_')])
PatternExpr_875 = da.pat.TuplePattern([da.pat.FreePattern(None), da.pat.TuplePattern([da.pat.FreePattern(None), da.pat.FreePattern(None), da.pat.FreePattern(None)]), da.pat.TuplePattern([da.pat.ConstantPattern('done'), da.pat.BoundPattern('_BoundPattern885_')])])
PatternExpr_760 = da.pat.TuplePattern([da.pat.FreePattern(None), da.pat.TuplePattern([da.pat.FreePattern(None), da.pat.FreePattern(None), da.pat.FreePattern(None)]), da.pat.TuplePattern([da.pat.ConstantPattern('release'), da.pat.BoundPattern('_BoundPattern770_'), da.pat.BoundPattern('_BoundPattern771_')])])
PatternExpr_793 = da.pat.TuplePattern([da.pat.FreePattern(None), da.pat.TuplePattern([da.pat.FreePattern(None), da.pat.FreePattern(None), da.pat.FreePattern(None)]), da.pat.TuplePattern([da.pat.ConstantPattern('ack'), da.pat.BoundPattern('_BoundPattern803_'), da.pat.BoundPattern('_BoundPattern804_')])])
PatternExpr_1044 = da.pat.TuplePattern([da.pat.ConstantPattern('done'), da.pat.BoundPattern('_BoundPattern1047_')])
PatternExpr_1115 = da.pat.TuplePattern([da.pat.ConstantPattern('done'), da.pat.BoundPattern('_BoundPattern1118_')])
PatternExpr_1186 = da.pat.TuplePattern([da.pat.ConstantPattern('done'), da.pat.BoundPattern('_BoundPattern1189_')])
PatternExpr_1050 = da.pat.TuplePattern([da.pat.FreePattern(None), da.pat.TuplePattern([da.pat.FreePattern(None), da.pat.FreePattern(None), da.pat.FreePattern(None)]), da.pat.TuplePattern([da.pat.ConstantPattern('done'), da.pat.BoundPattern('_BoundPattern1060_')])])
PatternExpr_1121 = da.pat.TuplePattern([da.pat.FreePattern(None), da.pat.TuplePattern([da.pat.FreePattern(None), da.pat.FreePattern(None), da.pat.FreePattern(None)]), da.pat.TuplePattern([da.pat.ConstantPattern('done'), da.pat.BoundPattern('_BoundPattern1131_')])])
PatternExpr_1192 = da.pat.TuplePattern([da.pat.FreePattern(None), da.pat.TuplePattern([da.pat.FreePattern(None), da.pat.FreePattern(None), da.pat.FreePattern(None)]), da.pat.TuplePattern([da.pat.ConstantPattern('done'), da.pat.BoundPattern('_BoundPattern1202_')])])
_config_object = {}
import sys
from random import randint

class PMine(da.DistProcess):

    def __init__(self, procimpl, props):
        super().__init__(procimpl, props)
        self._PMineReceivedEvent_1 = []
        self._PMineReceivedEvent_3 = []
        self._events.extend([da.pat.EventPattern(da.pat.ReceivedEvent, '_PMineReceivedEvent_0', PatternExpr_216, sources=None, destinations=None, timestamps=None, record_history=None, handlers=[self._PMine_handler_215]), da.pat.EventPattern(da.pat.ReceivedEvent, '_PMineReceivedEvent_1', PatternExpr_307, sources=None, destinations=None, timestamps=None, record_history=True, handlers=[]), da.pat.EventPattern(da.pat.ReceivedEvent, '_PMineReceivedEvent_2', PatternExpr_393, sources=None, destinations=None, timestamps=None, record_history=None, handlers=[self._PMine_handler_392]), da.pat.EventPattern(da.pat.ReceivedEvent, '_PMineReceivedEvent_3', PatternExpr_452, sources=[PatternExpr_457], destinations=None, timestamps=None, record_history=True, handlers=[])])

    def setup(self, s, nrequests, **rest_1208):
        super().setup(s=s, nrequests=nrequests, **rest_1208)
        self._state.s = s
        self._state.nrequests = nrequests
        self._state.q = set()
        self._state.timedOut = 0
        self._state.minimumTimeStamp = 100

    def run(self):
        for i in range(self._state.nrequests):
            self.request()
            self.cs()
            self.release()
        self.send(('done', self._id), to=self.parent())
        super()._label('_st_label_449', block=False)
        _st_label_449 = 0
        while (_st_label_449 == 0):
            _st_label_449 += 1
            if PatternExpr_460.match_iter(self._PMineReceivedEvent_3, _BoundPattern466_=self.parent(), SELF_ID=self._id):
                _st_label_449 += 1
            else:
                super()._label('_st_label_449', block=True)
                _st_label_449 -= 1

    def request(self):
        c = self.logical_clock()
        self.send(('request', c, self._id), to=self._state.s)
        self._state.q.add(('request', c, self._id))

    def cs(self):
        super()._label('cs', block=False)
        self._state.minimumTimeStamp = 100000
        for (tag, c, p2) in self._state.q:
            if ((tag == 'request') and (p2 == self._id) and (c < self._state.minimumTimeStamp)):
                self._state.minimumTimeStamp = c
        c = self._state.minimumTimeStamp
        super()._label('_st_label_272', block=False)
        p = c2 = None

        def UniversalOpExpr_274():
            nonlocal p, c2
            for (_ConstantPattern278_, c2, p) in self._state.q:
                if (_ConstantPattern278_ == 'request'):
                    if (not (((c2, p) == (c, self._id)) or ((c, self._id) < (c2, p)))):
                        return False
            return True
        p = c2 = None

        def UniversalOpExpr_300():
            nonlocal p, c2
            for p in self._state.s:

                def ExistentialOpExpr_305(p):
                    nonlocal c2
                    for (_, _, (_ConstantPattern322_, c2, _BoundPattern325_)) in self._PMineReceivedEvent_1:
                        if (_ConstantPattern322_ == 'ack'):
                            if (_BoundPattern325_ == p):
                                if (c2 > c):
                                    return True
                    return False
                if (not ExistentialOpExpr_305(p=p)):
                    return False
            return True
        _st_label_272 = 0
        self._timer_start()
        while (_st_label_272 == 0):
            _st_label_272 += 1
            if (UniversalOpExpr_274() and UniversalOpExpr_300()):
                self.output(((('In CS of process: ' + str(self._id)) + ' with timestamp : ') + str(c)))
                _st_label_272 += 1
            elif self._timer_expired:
                self._state.timedOut = (self._state.timedOut + 1)
                self.output(('Timed out for process: ' + str(self._id)))
                _st_label_272 += 1
            else:
                super()._label('_st_label_272', block=True, timeout=15)
                _st_label_272 -= 1

    def release(self):
        super()._label('release', block=False)
        for (tag, c, p) in self._state.q:
            if ((tag == 'request') and (p == self._id)):
                self._state.q.remove(('request', c, self._id))
                self.send(('release', self.logical_clock(), self._id), to=self._state.s)
                break

    def _PMine_handler_215(self, c2, p):
        super()._label('receive', block=False)
        self._state.q.add(('request', c2, p))
        self.send(('ack', self.logical_clock(), self._id), to=p)
    _PMine_handler_215._labels = None
    _PMine_handler_215._notlabels = None

    def _PMine_handler_392(self, c, p):
        for x in {('request', c, p) for (_ConstantPattern410_, c, _BoundPattern412_) in self._state.q if (_ConstantPattern410_ == 'request') if (_BoundPattern412_ == p)}:
            self._state.q.remove(x)
            break
    _PMine_handler_392._labels = None
    _PMine_handler_392._notlabels = None

class POrig(da.DistProcess):

    def __init__(self, procimpl, props):
        super().__init__(procimpl, props)
        self._POrigReceivedEvent_0 = []
        self._POrigReceivedEvent_3 = []
        self._events.extend([da.pat.EventPattern(da.pat.ReceivedEvent, '_POrigReceivedEvent_0', PatternExpr_548, sources=None, destinations=None, timestamps=None, record_history=True, handlers=[]), da.pat.EventPattern(da.pat.ReceivedEvent, '_POrigReceivedEvent_1', PatternExpr_592, sources=None, destinations=None, timestamps=None, record_history=None, handlers=[self._POrig_handler_591]), da.pat.EventPattern(da.pat.ReceivedEvent, '_POrigReceivedEvent_2', PatternExpr_618, sources=None, destinations=None, timestamps=None, record_history=None, handlers=[self._POrig_handler_617]), da.pat.EventPattern(da.pat.ReceivedEvent, '_POrigReceivedEvent_3', PatternExpr_677, sources=[PatternExpr_682], destinations=None, timestamps=None, record_history=True, handlers=[])])

    def setup(self, s, nrequests, **rest_1208):
        super().setup(s=s, nrequests=nrequests, **rest_1208)
        self._state.s = s
        self._state.nrequests = nrequests
        self._state.q = set()

    def run(self):

        def task():
            self.output('in cs')
        for i in range(self._state.nrequests):
            self.mutex(task)
        self.send(('done', self._id), to=self.parent())
        super()._label('_st_label_674', block=False)
        _st_label_674 = 0
        while (_st_label_674 == 0):
            _st_label_674 += 1
            if PatternExpr_685.match_iter(self._POrigReceivedEvent_3, _BoundPattern691_=self.parent(), SELF_ID=self._id):
                _st_label_674 += 1
            else:
                super()._label('_st_label_674', block=True)
                _st_label_674 -= 1

    def mutex(self, task):
        super()._label('request', block=False)
        c = self.logical_clock()
        self.send(('request', c, self._id), to=self._state.s)
        self._state.q.add(('request', c, self._id))
        super()._label('_st_label_513', block=False)
        p = c2 = None

        def UniversalOpExpr_515():
            nonlocal p, c2
            for (_ConstantPattern519_, c2, p) in self._state.q:
                if (_ConstantPattern519_ == 'request'):
                    if (not (((c2, p) == (c, self._id)) or ((c, self._id) < (c2, p)))):
                        return False
            return True
        p = c2 = None

        def UniversalOpExpr_541():
            nonlocal p, c2
            for p in self._state.s:

                def ExistentialOpExpr_546(p):
                    nonlocal c2
                    for (_, _, (_ConstantPattern563_, c2, _BoundPattern566_)) in self._POrigReceivedEvent_0:
                        if (_ConstantPattern563_ == 'ack'):
                            if (_BoundPattern566_ == p):
                                if (c2 > c):
                                    return True
                    return False
                if (not ExistentialOpExpr_546(p=p)):
                    return False
            return True
        _st_label_513 = 0
        while (_st_label_513 == 0):
            _st_label_513 += 1
            if (UniversalOpExpr_515() and UniversalOpExpr_541()):
                _st_label_513 += 1
            else:
                super()._label('_st_label_513', block=True)
                _st_label_513 -= 1
        super()._label('critical_section', block=False)
        task()
        super()._label('release', block=False)
        self._state.q.remove(('request', c, self._id))
        self.send(('release', self.logical_clock(), self._id), to=self._state.s)

    def _POrig_handler_591(self, c2, p):
        self._state.q.add(('request', c2, p))
        self.send(('ack', self.logical_clock(), self._id), to=p)
    _POrig_handler_591._labels = None
    _POrig_handler_591._notlabels = None

    def _POrig_handler_617(self, p):
        for x in {('request', c, p) for (_ConstantPattern634_, c, _BoundPattern637_) in self._state.q if (_ConstantPattern634_ == 'request') if (_BoundPattern637_ == p)}:
            self._state.q.remove(x)
            break
    _POrig_handler_617._labels = None
    _POrig_handler_617._notlabels = None

class PSpec(da.DistProcess):

    def __init__(self, procimpl, props):
        super().__init__(procimpl, props)
        self._PSpecReceivedEvent_0 = []
        self._PSpecReceivedEvent_1 = []
        self._PSpecReceivedEvent_2 = []
        self._PSpecReceivedEvent_4 = []
        self._events.extend([da.pat.EventPattern(da.pat.ReceivedEvent, '_PSpecReceivedEvent_0', PatternExpr_728, sources=None, destinations=None, timestamps=None, record_history=True, handlers=[]), da.pat.EventPattern(da.pat.ReceivedEvent, '_PSpecReceivedEvent_1', PatternExpr_753, sources=None, destinations=None, timestamps=None, record_history=True, handlers=[]), da.pat.EventPattern(da.pat.ReceivedEvent, '_PSpecReceivedEvent_2', PatternExpr_786, sources=None, destinations=None, timestamps=None, record_history=True, handlers=[]), da.pat.EventPattern(da.pat.ReceivedEvent, '_PSpecReceivedEvent_3', PatternExpr_818, sources=None, destinations=None, timestamps=None, record_history=None, handlers=[self._PSpec_handler_817]), da.pat.EventPattern(da.pat.ReceivedEvent, '_PSpecReceivedEvent_4', PatternExpr_869, sources=None, destinations=None, timestamps=None, record_history=True, handlers=[])])

    def setup(self, s, nrequests, **rest_1208):
        super().setup(s=s, nrequests=nrequests, **rest_1208)
        self._state.s = s
        self._state.nrequests = nrequests
        pass

    def run(self):

        def task():
            self.output('in cs')
            self.output('releasing cs')
        for i in range(self._state.nrequests):
            self.mutex(task)
        self.send(('done', self._id), to=self._state.s)
        super()._label('_st_label_860', block=False)
        p = None

        def UniversalOpExpr_861():
            nonlocal p
            for p in self._state.s:
                if (not PatternExpr_875.match_iter(self._PSpecReceivedEvent_4, _BoundPattern885_=p, SELF_ID=self._id)):
                    return False
            return True
        _st_label_860 = 0
        while (_st_label_860 == 0):
            _st_label_860 += 1
            if UniversalOpExpr_861():
                _st_label_860 += 1
            else:
                super()._label('_st_label_860', block=True)
                _st_label_860 -= 1

    def mutex(self, task):
        super()._label('request', block=False)
        c = self.logical_clock()
        self.send(('request', c, self._id), to=self._state.s)
        super()._label('_st_label_724', block=False)
        p = c2 = None

        def UniversalOpExpr_726():
            nonlocal p, c2
            for (_, _, (_ConstantPattern745_, c2, p)) in self._PSpecReceivedEvent_0:
                if (_ConstantPattern745_ == 'request'):
                    if (not (PatternExpr_760.match_iter(self._PSpecReceivedEvent_1, _BoundPattern770_=c2, _BoundPattern771_=p, SELF_ID=self._id) or ((c, self._id) < (c2, p)))):
                        return False
            return True
        p = None

        def UniversalOpExpr_779():
            nonlocal p
            for p in self._state.s:
                if (not PatternExpr_793.match_iter(self._PSpecReceivedEvent_2, _BoundPattern803_=c, _BoundPattern804_=p, SELF_ID=self._id)):
                    return False
            return True
        _st_label_724 = 0
        while (_st_label_724 == 0):
            _st_label_724 += 1
            if (UniversalOpExpr_726() and UniversalOpExpr_779()):
                _st_label_724 += 1
            else:
                super()._label('_st_label_724', block=True)
                _st_label_724 -= 1
        super()._label('critical_section', block=False)
        task()
        super()._label('release', block=False)
        self.send(('release', c, self._id), to=self._state.s)

    def _PSpec_handler_817(self, c, p):
        self.send(('ack', c, self._id), to=p)
    _PSpec_handler_817._labels = None
    _PSpec_handler_817._notlabels = None

class Node_(da.NodeProcess):

    def __init__(self, procimpl, props):
        super().__init__(procimpl, props)
        self._Node_ReceivedEvent_0 = []
        self._Node_ReceivedEvent_1 = []
        self._Node_ReceivedEvent_2 = []
        self._events.extend([da.pat.EventPattern(da.pat.ReceivedEvent, '_Node_ReceivedEvent_0', PatternExpr_1044, sources=None, destinations=None, timestamps=None, record_history=True, handlers=[]), da.pat.EventPattern(da.pat.ReceivedEvent, '_Node_ReceivedEvent_1', PatternExpr_1115, sources=None, destinations=None, timestamps=None, record_history=True, handlers=[]), da.pat.EventPattern(da.pat.ReceivedEvent, '_Node_ReceivedEvent_2', PatternExpr_1186, sources=None, destinations=None, timestamps=None, record_history=True, handlers=[])])
    _config_object = {'channel': 'fifo', 'clock': 'Lamport'}

    def run(self):
        nprocs = (int(sys.argv[1]) if (len(sys.argv) > 1) else 10)
        nrequests = (int(sys.argv[2]) if (len(sys.argv) > 2) else 10)
        nruns = (int(sys.argv[3]) if (len(sys.argv) > 3) else 10)
        nparamvalues = (int(sys.argv[4]) if (len(sys.argv) > 4) else 10)
        nreps = (int(sys.argv[5]) if (len(sys.argv) > 5) else 10)
        for i in range(nruns):
            numOfProcesses = randint(1, nprocs)
            numOfRequests = randint(1, nrequests)
            self.output(((((('Running iteration ' + str(i)) + ' for my lamport implementation with processes ') + str(numOfProcesses)) + ' and requests ') + str(numOfRequests)))
            psPMine = self.new(PMine, num=numOfProcesses)
            for p in psPMine:
                self._setup(p, ((psPMine - {p}), numOfRequests))
            self._start(psPMine)
            super()._label('_st_label_1036', block=False)
            p = None

            def UniversalOpExpr_1037():
                nonlocal p
                for p in psPMine:
                    if (not PatternExpr_1050.match_iter(self._Node_ReceivedEvent_0, _BoundPattern1060_=p)):
                        return False
                return True
            _st_label_1036 = 0
            while (_st_label_1036 == 0):
                _st_label_1036 += 1
                if UniversalOpExpr_1037():
                    _st_label_1036 += 1
                else:
                    super()._label('_st_label_1036', block=True)
                    _st_label_1036 -= 1
            else:
                if (_st_label_1036 != 2):
                    continue
            if (_st_label_1036 != 2):
                break
            self.send(('done',), to=psPMine)
            self.output(((((('Running iteration ' + str(i)) + ' for orig.da implementation with processes ') + str(numOfProcesses)) + ' and requests ') + str(numOfRequests)))
            psOrig = self.new(POrig, num=numOfProcesses)
            for p in psOrig:
                self._setup(p, ((psOrig - {p}), numOfRequests))
            self._start(psOrig)
            super()._label('_st_label_1107', block=False)
            p = None

            def UniversalOpExpr_1108():
                nonlocal p
                for p in psOrig:
                    if (not PatternExpr_1121.match_iter(self._Node_ReceivedEvent_1, _BoundPattern1131_=p)):
                        return False
                return True
            _st_label_1107 = 0
            while (_st_label_1107 == 0):
                _st_label_1107 += 1
                if UniversalOpExpr_1108():
                    _st_label_1107 += 1
                else:
                    super()._label('_st_label_1107', block=True)
                    _st_label_1107 -= 1
            else:
                if (_st_label_1107 != 2):
                    continue
            if (_st_label_1107 != 2):
                break
            self.send(('done',), to=psOrig)
            self.output(((((('Running iteration ' + str(i)) + ' for spec.da implementation with processes ') + str(numOfProcesses)) + ' and requests ') + str(numOfRequests)))
            psSpec = self.new(POrig, num=numOfProcesses)
            for p in psSpec:
                self._setup(p, ((psSpec - {p}), numOfRequests))
            self._start(psSpec)
            super()._label('_st_label_1178', block=False)
            p = None

            def UniversalOpExpr_1179():
                nonlocal p
                for p in psSpec:
                    if (not PatternExpr_1192.match_iter(self._Node_ReceivedEvent_2, _BoundPattern1202_=p)):
                        return False
                return True
            _st_label_1178 = 0
            while (_st_label_1178 == 0):
                _st_label_1178 += 1
                if UniversalOpExpr_1179():
                    _st_label_1178 += 1
                else:
                    super()._label('_st_label_1178', block=True)
                    _st_label_1178 -= 1
            else:
                if (_st_label_1178 != 2):
                    continue
            if (_st_label_1178 != 2):
                break
            self.send(('done',), to=psSpec)
