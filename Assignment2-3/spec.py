# -*- generated by 1.0.12 -*-
import da
PatternExpr_247 = da.pat.TuplePattern([da.pat.ConstantPattern('ack'), da.pat.FreePattern('c2'), da.pat.BoundPattern('_BoundPattern251_')])
PatternExpr_291 = da.pat.TuplePattern([da.pat.ConstantPattern('request'), da.pat.FreePattern('c2'), da.pat.FreePattern('p')])
PatternExpr_317 = da.pat.TuplePattern([da.pat.ConstantPattern('release'), da.pat.FreePattern(None), da.pat.FreePattern('p')])
_config_object = {}
import sys
controller = da.import_da('controller')

class P(controller.Controllee, da.DistProcess):

    def __init__(self, procimpl, props):
        super().__init__(procimpl, props)
        self._PReceivedEvent_0 = []
        self._events.extend([da.pat.EventPattern(da.pat.ReceivedEvent, '_PReceivedEvent_0', PatternExpr_247, sources=None, destinations=None, timestamps=None, record_history=True, handlers=[]), da.pat.EventPattern(da.pat.ReceivedEvent, '_PReceivedEvent_1', PatternExpr_291, sources=None, destinations=None, timestamps=None, record_history=None, handlers=[self._P_handler_290]), da.pat.EventPattern(da.pat.ReceivedEvent, '_PReceivedEvent_2', PatternExpr_317, sources=None, destinations=None, timestamps=None, record_history=None, handlers=[self._P_handler_316])])

    def setup(self, ctl, s, nrequests, **rest_446):
        super().setup(ctl=ctl, s=s, nrequests=nrequests, **rest_446)
        self._state.ctl = ctl
        self._state.s = s
        self._state.nrequests = nrequests
        super().setup(self._state.ctl)
        self._state.q = set()

    @controller.run
    def run(self):

        def task():
            self.output('in cs')
        for i in range(self._state.nrequests):
            self.mutex(task)

    def mutex(self, task):
        super()._label('request', block=False)
        c = self.logical_clock()
        self.send(('request', c, self._id), to=self._state.s)
        self._state.q.add(('request', c, self._id))
        super()._label('_st_label_212', block=False)
        p = c2 = None

        def UniversalOpExpr_214():
            nonlocal p, c2
            for (_ConstantPattern218_, c2, p) in self._state.q:
                if (_ConstantPattern218_ == 'request'):
                    if (not (((c2, p) == (c, self._id)) or ((c, self._id) < (c2, p)))):
                        return False
            return True
        p = c2 = None

        def UniversalOpExpr_240():
            nonlocal p, c2
            for p in self._state.s:

                def ExistentialOpExpr_245(p):
                    nonlocal c2
                    for (_, _, (_ConstantPattern262_, c2, _BoundPattern265_)) in self._PReceivedEvent_0:
                        if (_ConstantPattern262_ == 'ack'):
                            if (_BoundPattern265_ == p):
                                if (c2 > c):
                                    return True
                    return False
                if (not ExistentialOpExpr_245(p=p)):
                    return False
            return True
        _st_label_212 = 0
        while (_st_label_212 == 0):
            _st_label_212 += 1
            if (UniversalOpExpr_214() and UniversalOpExpr_240()):
                _st_label_212 += 1
            else:
                super()._label('_st_label_212', block=True)
                _st_label_212 -= 1
        super()._label('critical_section', block=False)
        task()
        super()._label('release', block=False)
        self._state.q.remove(('request', c, self._id))
        self.send(('release', self.logical_clock(), self._id), to=self._state.s)

    def _P_handler_290(self, c2, p):
        self._state.q.add(('request', c2, p))
        self.send(('ack', self.logical_clock(), self._id), to=p)
    _P_handler_290._labels = None
    _P_handler_290._notlabels = None

    def _P_handler_316(self, p):
        for x in {('request', c, p) for (_ConstantPattern333_, c, _BoundPattern336_) in self._state.q if (_ConstantPattern333_ == 'request') if (_BoundPattern336_ == p)}:
            self._state.q.remove(x)
            break
    _P_handler_316._labels = None
    _P_handler_316._notlabels = None

class Node_(da.NodeProcess):

    def __init__(self, procimpl, props):
        super().__init__(procimpl, props)
        self._events.extend([])
    _config_object = {'channel': 'fifo', 'clock': 'Lamport'}

    def run(self):
        nprocs = (int(sys.argv[1]) if (len(sys.argv) > 1) else 10)
        nrequests = (int(sys.argv[2]) if (len(sys.argv) > 2) else 1)
        ctl = self.new(controller.Controller, num=1)
        self._setup(ctl, (nprocs,))
        self._start(ctl)
        ps = self.new(P, num=nprocs)
        for p in ps:
            self._setup(p, (ctl, (ps - {p}), nrequests))
        self._start(ps)
