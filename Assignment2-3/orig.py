# -*- generated by 1.0.12 -*-
import da
PatternExpr_202 = da.pat.TuplePattern([da.pat.ConstantPattern('request'), da.pat.FreePattern('c2'), da.pat.FreePattern('p')])
PatternExpr_227 = da.pat.TuplePattern([da.pat.ConstantPattern('release'), da.pat.BoundPattern('_BoundPattern230_'), da.pat.BoundPattern('_BoundPattern231_')])
PatternExpr_261 = da.pat.TuplePattern([da.pat.ConstantPattern('ack'), da.pat.BoundPattern('_BoundPattern264_'), da.pat.BoundPattern('_BoundPattern265_')])
PatternExpr_294 = da.pat.TuplePattern([da.pat.ConstantPattern('request'), da.pat.FreePattern('c'), da.pat.FreePattern('p')])
PatternExpr_234 = da.pat.TuplePattern([da.pat.FreePattern(None), da.pat.TuplePattern([da.pat.FreePattern(None), da.pat.FreePattern(None), da.pat.FreePattern(None)]), da.pat.TuplePattern([da.pat.ConstantPattern('release'), da.pat.BoundPattern('_BoundPattern244_'), da.pat.BoundPattern('_BoundPattern245_')])])
PatternExpr_268 = da.pat.TuplePattern([da.pat.FreePattern(None), da.pat.TuplePattern([da.pat.FreePattern(None), da.pat.FreePattern(None), da.pat.FreePattern(None)]), da.pat.TuplePattern([da.pat.ConstantPattern('ack'), da.pat.BoundPattern('_BoundPattern278_'), da.pat.BoundPattern('_BoundPattern279_')])])
_config_object = {}
import sys
controller = da.import_da('controller')

class P(controller.Controllee, da.DistProcess):

    def __init__(self, procimpl, props):
        super().__init__(procimpl, props)
        self._PReceivedEvent_0 = []
        self._PReceivedEvent_1 = []
        self._PReceivedEvent_2 = []
        self._events.extend([da.pat.EventPattern(da.pat.ReceivedEvent, '_PReceivedEvent_0', PatternExpr_202, sources=None, destinations=None, timestamps=None, record_history=True, handlers=[]), da.pat.EventPattern(da.pat.ReceivedEvent, '_PReceivedEvent_1', PatternExpr_227, sources=None, destinations=None, timestamps=None, record_history=True, handlers=[]), da.pat.EventPattern(da.pat.ReceivedEvent, '_PReceivedEvent_2', PatternExpr_261, sources=None, destinations=None, timestamps=None, record_history=True, handlers=[]), da.pat.EventPattern(da.pat.ReceivedEvent, '_PReceivedEvent_3', PatternExpr_294, sources=None, destinations=None, timestamps=None, record_history=None, handlers=[self._P_handler_293])])

    def setup(self, ctl, s, nrequests, **rest_408):
        super().setup(ctl=ctl, s=s, nrequests=nrequests, **rest_408)
        self._state.ctl = ctl
        self._state.s = s
        self._state.nrequests = nrequests
        super().setup(self._state.ctl)

    @controller.run
    def run(self):

        def task():
            self.output('in cs')
        for i in range(self._state.nrequests):
            self.mutex(task)

    def mutex(self, task):
        super()._label('request', block=False)
        c = self.logical_clock()
        self.send(('request', c, self._id), to=self._state.s)
        super()._label('_st_label_198', block=False)
        p = c2 = None

        def UniversalOpExpr_200():
            nonlocal p, c2
            for (_, _, (_ConstantPattern219_, c2, p)) in self._PReceivedEvent_0:
                if (_ConstantPattern219_ == 'request'):
                    if (not (PatternExpr_234.match_iter(self._PReceivedEvent_1, _BoundPattern244_=c2, _BoundPattern245_=p, SELF_ID=self._id) or ((c, self._id) < (c2, p)))):
                        return False
            return True
        p = None

        def UniversalOpExpr_254():
            nonlocal p
            for p in self._state.s:
                if (not PatternExpr_268.match_iter(self._PReceivedEvent_2, _BoundPattern278_=c, _BoundPattern279_=p, SELF_ID=self._id)):
                    return False
            return True
        _st_label_198 = 0
        while (_st_label_198 == 0):
            _st_label_198 += 1
            if (UniversalOpExpr_200() and UniversalOpExpr_254()):
                _st_label_198 += 1
            else:
                super()._label('_st_label_198', block=True)
                _st_label_198 -= 1
        super()._label('critical_section', block=False)
        task()
        super()._label('release', block=False)
        self.send(('release', c, self._id), to=self._state.s)

    def _P_handler_293(self, c, p):
        self.send(('ack', c, self._id), to=p)
    _P_handler_293._labels = None
    _P_handler_293._notlabels = None

class Node_(da.NodeProcess):

    def __init__(self, procimpl, props):
        super().__init__(procimpl, props)
        self._events.extend([])
    _config_object = {'channel': 'fifo', 'clock': 'Lamport'}

    def run(self):
        nprocs = (int(sys.argv[1]) if (len(sys.argv) > 1) else 10)
        nrequests = (int(sys.argv[2]) if (len(sys.argv) > 2) else 1)
        ctl = self.new(controller.Controller, num=1)
        self._setup(ctl, (nprocs,))
        self._start(ctl)
        ps = self.new(P, num=nprocs)
        for p in ps:
            self._setup(p, (ctl, (ps - {p}), nrequests))
        self._start(ps)
