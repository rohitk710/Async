import sys
from random import randint

class PMine(process):
    def setup(s:set, nrequests:int):
        self.q = set()
        self.timedOut = 0
        self.minimumTimeStamp = 100


    # Step1: To request the resource, process Pi sends the message Tm:Pi requests resource to every other process, 
    # and puts that message on its request queue, where Tm is the timestamp of the message.
    
    def request():
        c = logical_clock()
        send(('request', c, self), to= s)
        q.add(('request', c , self))
        

    def receive(msg= ('request', c2, p)):
        -- receive
        q.add(('request', c2, p))
        send(('ack', logical_clock(), self), to= p)

    #For entering the CS we check in that process's queue for it's earliest call and verify CS entering condition for it and if it satisfies we remove it.
    def cs():
        -- cs
        minimumTimeStamp = 100000
        for (tag, c, p2) in q:
            if(tag == 'request' and p2==self and c < minimumTimeStamp):
                minimumTimeStamp = c;
        c = minimumTimeStamp
        if await(each(('request', c2, p)in q, has= (c2,p)==(c, self) or (c,self) < (c2, p)) and each(p in s, has= some(received(('ack', c2, _p)), has= c2 > c))):
            output('In CS of process: ' + str(self) + ' with timestamp : '+ str(c))
        elif timeout(15):
            timedOut = timedOut + 1
            output ('Timed out for process: ' + str(self))        

    # For release we select any request from the self's queue and remove it.
    def release():
        -- release
        for(tag, c, p) in q:
            if(tag == 'request' and p==self):
                q.remove(('request', c, self))
                send(('release', logical_clock(), self), to= s)
                break

    # Once process receives the release request, it searches for any request message in its queue from the sender's process and removes it.
    def receive(msg= ('release', c, p)):
        for x in setof(('request', c, p), ('request', c, _p) in q):
            q.remove(x)
            break

    def run():
        for i in range(nrequests):
            request()
            request()
            cs()
            release()
            cs()
            release()
        send(('done', self), to= parent())
        await(received(('done',), from_=parent()))  

class POrig(process):
    def setup(s:set, nrequests:int):  # s is set of all other processes
        self.q = set()

    def mutex(task):
        -- request
        c = logical_clock()
        send(('request', c, self), to= s)
        q.add(('request', c, self))
        await(each(('request', c2, p) in q,
                   has= (c2, p)==(c, self) or (c, self) < (c2, p)) and
              each(p in s, has= some(received(('ack', c2, _p)), has= c2 > c)))
        -- critical_section
        task()
        -- release
        q.remove(('request', c, self))
        send(('release', logical_clock(), self), to= s)

    def receive(msg= ('request', c2, p)):
        q.add(('request', c2, p))
        send(('ack', logical_clock(), self), to= p)

    def receive(msg= ('release', _, p)):
        for x in setof(('request', c, p), ('request', c, _p) in q):
            q.remove(x)
            break

    def run():
        def task():
            output('in cs')
        for i in range(nrequests):
            mutex(task)

        send(('done', self), to= parent())
        await(received(('done',), from_=parent()))

class PSpec(process):
    def setup(s:set, nrequests:int): pass  # s is set of all other processes

    def mutex(task):
        -- request
        c = logical_clock()
        send(('request', c, self), to= s)
        await(each(received(('request', c2, p)),
                has= received(('release', c2, p)) or (c, self) < (c2, p))
            and each(p in s, has= received(('ack', c, p))))
        -- critical_section
        task()
        -- release
        send(('release', c, self), to= s)

    def receive(msg= ('request', c, p)):
        send(('ack', c, self), to= p)

    def run():
        def task():
            output('in cs')
            output('releasing cs')
        for i in range(nrequests):
            mutex(task)

        send(('done', self), to= s)
        await(each(p in s, has= received(('done', p))))


def main():
    nprocs = int(sys.argv[1]) if len(sys.argv) > 1 else 10
    nrequests = int(sys.argv[2]) if len(sys.argv) > 2 else 10
    nruns = int(sys.argv[3]) if len(sys.argv) > 3 else 10
    nparamvalues = int(sys.argv[4]) if len(sys.argv) > 4 else 10
    nreps = int(sys.argv[5]) if len(sys.argv) > 5 else 10
    
    config(channel= 'fifo', clock= 'Lamport')
    #ctl = new(controller.Controller, num= 1)


    for i in range(nruns):
        numOfProcesses = randint(1, nprocs)
        numOfRequests = randint(1, nrequests)

        output('Running iteration ' + str(i) + ' for my lamport implementation with processes ' + str(numOfProcesses) + ' and requests ' + str(numOfRequests) )

        psPMine = new(PMine, num= numOfProcesses)
        for p in psPMine: setup(p, ( psPMine-{p}, numOfRequests))
        start(psPMine)
        await(each(p in psPMine, has=received(('done', p))))
        send(('done',), to=psPMine)

        output('Running iteration ' + str(i) + ' for orig.da implementation with processes ' + str(numOfProcesses) + ' and requests ' + str(numOfRequests) )

        psOrig = new(POrig, num= numOfProcesses)
        for p in psOrig: setup(p, (psOrig-{p}, numOfRequests))
        start(psOrig)
        await(each(p in psOrig, has=received(('done', p))))
        send(('done',), to=psOrig)

        output('Running iteration ' + str(i) + ' for spec.da implementation with processes ' + str(numOfProcesses) + ' and requests ' + str(numOfRequests) )

        psSpec = new(POrig, num= numOfProcesses)
        for p in psSpec: setup(p, (psSpec-{p}, numOfRequests))
        start(psSpec)
        await(each(p in psSpec, has=received(('done', p))))
        send(('done',), to=psSpec)




    

    