# -*- generated by 1.0.12 -*-
import da
PatternExpr_216 = da.pat.TuplePattern([da.pat.ConstantPattern('request'), da.pat.FreePattern('c2'), da.pat.FreePattern('p')])
PatternExpr_307 = da.pat.TuplePattern([da.pat.ConstantPattern('ack'), da.pat.FreePattern('c2'), da.pat.BoundPattern('_BoundPattern311_')])
PatternExpr_393 = da.pat.TuplePattern([da.pat.ConstantPattern('release'), da.pat.FreePattern('c'), da.pat.FreePattern('p')])
PatternExpr_461 = da.pat.TuplePattern([da.pat.ConstantPattern('done')])
PatternExpr_466 = da.pat.BoundPattern('_BoundPattern468_')
PatternExpr_469 = da.pat.TuplePattern([da.pat.FreePattern(None), da.pat.TuplePattern([da.pat.FreePattern(None), da.pat.FreePattern(None), da.pat.BoundPattern('_BoundPattern475_')]), da.pat.TuplePattern([da.pat.ConstantPattern('done')])])
PatternExpr_557 = da.pat.TuplePattern([da.pat.ConstantPattern('ack'), da.pat.FreePattern('c2'), da.pat.BoundPattern('_BoundPattern561_')])
PatternExpr_601 = da.pat.TuplePattern([da.pat.ConstantPattern('request'), da.pat.FreePattern('c2'), da.pat.FreePattern('p')])
PatternExpr_627 = da.pat.TuplePattern([da.pat.ConstantPattern('release'), da.pat.FreePattern(None), da.pat.FreePattern('p')])
PatternExpr_686 = da.pat.TuplePattern([da.pat.ConstantPattern('done')])
PatternExpr_691 = da.pat.BoundPattern('_BoundPattern693_')
PatternExpr_694 = da.pat.TuplePattern([da.pat.FreePattern(None), da.pat.TuplePattern([da.pat.FreePattern(None), da.pat.FreePattern(None), da.pat.BoundPattern('_BoundPattern700_')]), da.pat.TuplePattern([da.pat.ConstantPattern('done')])])
PatternExpr_737 = da.pat.TuplePattern([da.pat.ConstantPattern('request'), da.pat.FreePattern('c2'), da.pat.FreePattern('p')])
PatternExpr_762 = da.pat.TuplePattern([da.pat.ConstantPattern('release'), da.pat.BoundPattern('_BoundPattern765_'), da.pat.BoundPattern('_BoundPattern766_')])
PatternExpr_795 = da.pat.TuplePattern([da.pat.ConstantPattern('ack'), da.pat.BoundPattern('_BoundPattern798_'), da.pat.BoundPattern('_BoundPattern799_')])
PatternExpr_827 = da.pat.TuplePattern([da.pat.ConstantPattern('request'), da.pat.FreePattern('c'), da.pat.FreePattern('p')])
PatternExpr_878 = da.pat.TuplePattern([da.pat.ConstantPattern('done'), da.pat.BoundPattern('_BoundPattern881_')])
PatternExpr_884 = da.pat.TuplePattern([da.pat.FreePattern(None), da.pat.TuplePattern([da.pat.FreePattern(None), da.pat.FreePattern(None), da.pat.FreePattern(None)]), da.pat.TuplePattern([da.pat.ConstantPattern('done'), da.pat.BoundPattern('_BoundPattern894_')])])
PatternExpr_769 = da.pat.TuplePattern([da.pat.FreePattern(None), da.pat.TuplePattern([da.pat.FreePattern(None), da.pat.FreePattern(None), da.pat.FreePattern(None)]), da.pat.TuplePattern([da.pat.ConstantPattern('release'), da.pat.BoundPattern('_BoundPattern779_'), da.pat.BoundPattern('_BoundPattern780_')])])
PatternExpr_802 = da.pat.TuplePattern([da.pat.FreePattern(None), da.pat.TuplePattern([da.pat.FreePattern(None), da.pat.FreePattern(None), da.pat.FreePattern(None)]), da.pat.TuplePattern([da.pat.ConstantPattern('ack'), da.pat.BoundPattern('_BoundPattern812_'), da.pat.BoundPattern('_BoundPattern813_')])])
PatternExpr_1053 = da.pat.TuplePattern([da.pat.ConstantPattern('done'), da.pat.BoundPattern('_BoundPattern1056_')])
PatternExpr_1124 = da.pat.TuplePattern([da.pat.ConstantPattern('done'), da.pat.BoundPattern('_BoundPattern1127_')])
PatternExpr_1195 = da.pat.TuplePattern([da.pat.ConstantPattern('done'), da.pat.BoundPattern('_BoundPattern1198_')])
PatternExpr_1059 = da.pat.TuplePattern([da.pat.FreePattern(None), da.pat.TuplePattern([da.pat.FreePattern(None), da.pat.FreePattern(None), da.pat.FreePattern(None)]), da.pat.TuplePattern([da.pat.ConstantPattern('done'), da.pat.BoundPattern('_BoundPattern1069_')])])
PatternExpr_1130 = da.pat.TuplePattern([da.pat.FreePattern(None), da.pat.TuplePattern([da.pat.FreePattern(None), da.pat.FreePattern(None), da.pat.FreePattern(None)]), da.pat.TuplePattern([da.pat.ConstantPattern('done'), da.pat.BoundPattern('_BoundPattern1140_')])])
PatternExpr_1201 = da.pat.TuplePattern([da.pat.FreePattern(None), da.pat.TuplePattern([da.pat.FreePattern(None), da.pat.FreePattern(None), da.pat.FreePattern(None)]), da.pat.TuplePattern([da.pat.ConstantPattern('done'), da.pat.BoundPattern('_BoundPattern1211_')])])
_config_object = {}
import sys
from random import randint

class PMine(da.DistProcess):

    def __init__(self, procimpl, props):
        super().__init__(procimpl, props)
        self._PMineReceivedEvent_1 = []
        self._PMineReceivedEvent_3 = []
        self._events.extend([da.pat.EventPattern(da.pat.ReceivedEvent, '_PMineReceivedEvent_0', PatternExpr_216, sources=None, destinations=None, timestamps=None, record_history=None, handlers=[self._PMine_handler_215]), da.pat.EventPattern(da.pat.ReceivedEvent, '_PMineReceivedEvent_1', PatternExpr_307, sources=None, destinations=None, timestamps=None, record_history=True, handlers=[]), da.pat.EventPattern(da.pat.ReceivedEvent, '_PMineReceivedEvent_2', PatternExpr_393, sources=None, destinations=None, timestamps=None, record_history=None, handlers=[self._PMine_handler_392]), da.pat.EventPattern(da.pat.ReceivedEvent, '_PMineReceivedEvent_3', PatternExpr_461, sources=[PatternExpr_466], destinations=None, timestamps=None, record_history=True, handlers=[])])

    def setup(self, s, nrequests, **rest_1217):
        super().setup(s=s, nrequests=nrequests, **rest_1217)
        self._state.s = s
        self._state.nrequests = nrequests
        self._state.q = set()
        self._state.timedOut = 0
        self._state.minimumTimeStamp = 100

    def run(self):
        for i in range(self._state.nrequests):
            self.request()
            self.request()
            self.cs()
            self.release()
            self.cs()
            self.release()
        self.send(('done', self._id), to=self.parent())
        super()._label('_st_label_458', block=False)
        _st_label_458 = 0
        while (_st_label_458 == 0):
            _st_label_458 += 1
            if PatternExpr_469.match_iter(self._PMineReceivedEvent_3, _BoundPattern475_=self.parent(), SELF_ID=self._id):
                _st_label_458 += 1
            else:
                super()._label('_st_label_458', block=True)
                _st_label_458 -= 1

    def request(self):
        c = self.logical_clock()
        self.send(('request', c, self._id), to=self._state.s)
        self._state.q.add(('request', c, self._id))

    def cs(self):
        super()._label('cs', block=False)
        self._state.minimumTimeStamp = 100000
        for (tag, c, p2) in self._state.q:
            if ((tag == 'request') and (p2 == self._id) and (c < self._state.minimumTimeStamp)):
                self._state.minimumTimeStamp = c
        c = self._state.minimumTimeStamp
        super()._label('_st_label_272', block=False)
        p = c2 = None

        def UniversalOpExpr_274():
            nonlocal p, c2
            for (_ConstantPattern278_, c2, p) in self._state.q:
                if (_ConstantPattern278_ == 'request'):
                    if (not (((c2, p) == (c, self._id)) or ((c, self._id) < (c2, p)))):
                        return False
            return True
        p = c2 = None

        def UniversalOpExpr_300():
            nonlocal p, c2
            for p in self._state.s:

                def ExistentialOpExpr_305(p):
                    nonlocal c2
                    for (_, _, (_ConstantPattern322_, c2, _BoundPattern325_)) in self._PMineReceivedEvent_1:
                        if (_ConstantPattern322_ == 'ack'):
                            if (_BoundPattern325_ == p):
                                if (c2 > c):
                                    return True
                    return False
                if (not ExistentialOpExpr_305(p=p)):
                    return False
            return True
        _st_label_272 = 0
        self._timer_start()
        while (_st_label_272 == 0):
            _st_label_272 += 1
            if (UniversalOpExpr_274() and UniversalOpExpr_300()):
                self.output(((('In CS of process: ' + str(self._id)) + ' with timestamp : ') + str(c)))
                _st_label_272 += 1
            elif self._timer_expired:
                self._state.timedOut = (self._state.timedOut + 1)
                self.output(('Timed out for process: ' + str(self._id)))
                _st_label_272 += 1
            else:
                super()._label('_st_label_272', block=True, timeout=15)
                _st_label_272 -= 1

    def release(self):
        super()._label('release', block=False)
        for (tag, c, p) in self._state.q:
            if ((tag == 'request') and (p == self._id)):
                self._state.q.remove(('request', c, self._id))
                self.send(('release', self.logical_clock(), self._id), to=self._state.s)
                break

    def _PMine_handler_215(self, c2, p):
        super()._label('receive', block=False)
        self._state.q.add(('request', c2, p))
        self.send(('ack', self.logical_clock(), self._id), to=p)
    _PMine_handler_215._labels = None
    _PMine_handler_215._notlabels = None

    def _PMine_handler_392(self, c, p):
        for x in {('request', c, p) for (_ConstantPattern410_, c, _BoundPattern412_) in self._state.q if (_ConstantPattern410_ == 'request') if (_BoundPattern412_ == p)}:
            self._state.q.remove(x)
            break
    _PMine_handler_392._labels = None
    _PMine_handler_392._notlabels = None

class POrig(da.DistProcess):

    def __init__(self, procimpl, props):
        super().__init__(procimpl, props)
        self._POrigReceivedEvent_0 = []
        self._POrigReceivedEvent_3 = []
        self._events.extend([da.pat.EventPattern(da.pat.ReceivedEvent, '_POrigReceivedEvent_0', PatternExpr_557, sources=None, destinations=None, timestamps=None, record_history=True, handlers=[]), da.pat.EventPattern(da.pat.ReceivedEvent, '_POrigReceivedEvent_1', PatternExpr_601, sources=None, destinations=None, timestamps=None, record_history=None, handlers=[self._POrig_handler_600]), da.pat.EventPattern(da.pat.ReceivedEvent, '_POrigReceivedEvent_2', PatternExpr_627, sources=None, destinations=None, timestamps=None, record_history=None, handlers=[self._POrig_handler_626]), da.pat.EventPattern(da.pat.ReceivedEvent, '_POrigReceivedEvent_3', PatternExpr_686, sources=[PatternExpr_691], destinations=None, timestamps=None, record_history=True, handlers=[])])

    def setup(self, s, nrequests, **rest_1217):
        super().setup(s=s, nrequests=nrequests, **rest_1217)
        self._state.s = s
        self._state.nrequests = nrequests
        self._state.q = set()

    def run(self):

        def task():
            self.output('in cs')
        for i in range(self._state.nrequests):
            self.mutex(task)
        self.send(('done', self._id), to=self.parent())
        super()._label('_st_label_683', block=False)
        _st_label_683 = 0
        while (_st_label_683 == 0):
            _st_label_683 += 1
            if PatternExpr_694.match_iter(self._POrigReceivedEvent_3, _BoundPattern700_=self.parent(), SELF_ID=self._id):
                _st_label_683 += 1
            else:
                super()._label('_st_label_683', block=True)
                _st_label_683 -= 1

    def mutex(self, task):
        super()._label('request', block=False)
        c = self.logical_clock()
        self.send(('request', c, self._id), to=self._state.s)
        self._state.q.add(('request', c, self._id))
        super()._label('_st_label_522', block=False)
        p = c2 = None

        def UniversalOpExpr_524():
            nonlocal p, c2
            for (_ConstantPattern528_, c2, p) in self._state.q:
                if (_ConstantPattern528_ == 'request'):
                    if (not (((c2, p) == (c, self._id)) or ((c, self._id) < (c2, p)))):
                        return False
            return True
        p = c2 = None

        def UniversalOpExpr_550():
            nonlocal p, c2
            for p in self._state.s:

                def ExistentialOpExpr_555(p):
                    nonlocal c2
                    for (_, _, (_ConstantPattern572_, c2, _BoundPattern575_)) in self._POrigReceivedEvent_0:
                        if (_ConstantPattern572_ == 'ack'):
                            if (_BoundPattern575_ == p):
                                if (c2 > c):
                                    return True
                    return False
                if (not ExistentialOpExpr_555(p=p)):
                    return False
            return True
        _st_label_522 = 0
        while (_st_label_522 == 0):
            _st_label_522 += 1
            if (UniversalOpExpr_524() and UniversalOpExpr_550()):
                _st_label_522 += 1
            else:
                super()._label('_st_label_522', block=True)
                _st_label_522 -= 1
        super()._label('critical_section', block=False)
        task()
        super()._label('release', block=False)
        self._state.q.remove(('request', c, self._id))
        self.send(('release', self.logical_clock(), self._id), to=self._state.s)

    def _POrig_handler_600(self, c2, p):
        self._state.q.add(('request', c2, p))
        self.send(('ack', self.logical_clock(), self._id), to=p)
    _POrig_handler_600._labels = None
    _POrig_handler_600._notlabels = None

    def _POrig_handler_626(self, p):
        for x in {('request', c, p) for (_ConstantPattern643_, c, _BoundPattern646_) in self._state.q if (_ConstantPattern643_ == 'request') if (_BoundPattern646_ == p)}:
            self._state.q.remove(x)
            break
    _POrig_handler_626._labels = None
    _POrig_handler_626._notlabels = None

class PSpec(da.DistProcess):

    def __init__(self, procimpl, props):
        super().__init__(procimpl, props)
        self._PSpecReceivedEvent_0 = []
        self._PSpecReceivedEvent_1 = []
        self._PSpecReceivedEvent_2 = []
        self._PSpecReceivedEvent_4 = []
        self._events.extend([da.pat.EventPattern(da.pat.ReceivedEvent, '_PSpecReceivedEvent_0', PatternExpr_737, sources=None, destinations=None, timestamps=None, record_history=True, handlers=[]), da.pat.EventPattern(da.pat.ReceivedEvent, '_PSpecReceivedEvent_1', PatternExpr_762, sources=None, destinations=None, timestamps=None, record_history=True, handlers=[]), da.pat.EventPattern(da.pat.ReceivedEvent, '_PSpecReceivedEvent_2', PatternExpr_795, sources=None, destinations=None, timestamps=None, record_history=True, handlers=[]), da.pat.EventPattern(da.pat.ReceivedEvent, '_PSpecReceivedEvent_3', PatternExpr_827, sources=None, destinations=None, timestamps=None, record_history=None, handlers=[self._PSpec_handler_826]), da.pat.EventPattern(da.pat.ReceivedEvent, '_PSpecReceivedEvent_4', PatternExpr_878, sources=None, destinations=None, timestamps=None, record_history=True, handlers=[])])

    def setup(self, s, nrequests, **rest_1217):
        super().setup(s=s, nrequests=nrequests, **rest_1217)
        self._state.s = s
        self._state.nrequests = nrequests
        pass

    def run(self):

        def task():
            self.output('in cs')
            self.output('releasing cs')
        for i in range(self._state.nrequests):
            self.mutex(task)
        self.send(('done', self._id), to=self._state.s)
        super()._label('_st_label_869', block=False)
        p = None

        def UniversalOpExpr_870():
            nonlocal p
            for p in self._state.s:
                if (not PatternExpr_884.match_iter(self._PSpecReceivedEvent_4, _BoundPattern894_=p, SELF_ID=self._id)):
                    return False
            return True
        _st_label_869 = 0
        while (_st_label_869 == 0):
            _st_label_869 += 1
            if UniversalOpExpr_870():
                _st_label_869 += 1
            else:
                super()._label('_st_label_869', block=True)
                _st_label_869 -= 1

    def mutex(self, task):
        super()._label('request', block=False)
        c = self.logical_clock()
        self.send(('request', c, self._id), to=self._state.s)
        super()._label('_st_label_733', block=False)
        p = c2 = None

        def UniversalOpExpr_735():
            nonlocal p, c2
            for (_, _, (_ConstantPattern754_, c2, p)) in self._PSpecReceivedEvent_0:
                if (_ConstantPattern754_ == 'request'):
                    if (not (PatternExpr_769.match_iter(self._PSpecReceivedEvent_1, _BoundPattern779_=c2, _BoundPattern780_=p, SELF_ID=self._id) or ((c, self._id) < (c2, p)))):
                        return False
            return True
        p = None

        def UniversalOpExpr_788():
            nonlocal p
            for p in self._state.s:
                if (not PatternExpr_802.match_iter(self._PSpecReceivedEvent_2, _BoundPattern812_=c, _BoundPattern813_=p, SELF_ID=self._id)):
                    return False
            return True
        _st_label_733 = 0
        while (_st_label_733 == 0):
            _st_label_733 += 1
            if (UniversalOpExpr_735() and UniversalOpExpr_788()):
                _st_label_733 += 1
            else:
                super()._label('_st_label_733', block=True)
                _st_label_733 -= 1
        super()._label('critical_section', block=False)
        task()
        super()._label('release', block=False)
        self.send(('release', c, self._id), to=self._state.s)

    def _PSpec_handler_826(self, c, p):
        self.send(('ack', c, self._id), to=p)
    _PSpec_handler_826._labels = None
    _PSpec_handler_826._notlabels = None

class Node_(da.NodeProcess):

    def __init__(self, procimpl, props):
        super().__init__(procimpl, props)
        self._Node_ReceivedEvent_0 = []
        self._Node_ReceivedEvent_1 = []
        self._Node_ReceivedEvent_2 = []
        self._events.extend([da.pat.EventPattern(da.pat.ReceivedEvent, '_Node_ReceivedEvent_0', PatternExpr_1053, sources=None, destinations=None, timestamps=None, record_history=True, handlers=[]), da.pat.EventPattern(da.pat.ReceivedEvent, '_Node_ReceivedEvent_1', PatternExpr_1124, sources=None, destinations=None, timestamps=None, record_history=True, handlers=[]), da.pat.EventPattern(da.pat.ReceivedEvent, '_Node_ReceivedEvent_2', PatternExpr_1195, sources=None, destinations=None, timestamps=None, record_history=True, handlers=[])])
    _config_object = {'channel': 'fifo', 'clock': 'Lamport'}

    def run(self):
        nprocs = (int(sys.argv[1]) if (len(sys.argv) > 1) else 10)
        nrequests = (int(sys.argv[2]) if (len(sys.argv) > 2) else 10)
        nruns = (int(sys.argv[3]) if (len(sys.argv) > 3) else 10)
        nparamvalues = (int(sys.argv[4]) if (len(sys.argv) > 4) else 10)
        nreps = (int(sys.argv[5]) if (len(sys.argv) > 5) else 10)
        for i in range(nruns):
            numOfProcesses = randint(1, nprocs)
            numOfRequests = randint(1, nrequests)
            self.output(((((('Running iteration ' + str(i)) + ' for my lamport implementation with processes ') + str(numOfProcesses)) + ' and requests ') + str(numOfRequests)))
            psPMine = self.new(PMine, num=numOfProcesses)
            for p in psPMine:
                self._setup(p, ((psPMine - {p}), numOfRequests))
            self._start(psPMine)
            super()._label('_st_label_1045', block=False)
            p = None

            def UniversalOpExpr_1046():
                nonlocal p
                for p in psPMine:
                    if (not PatternExpr_1059.match_iter(self._Node_ReceivedEvent_0, _BoundPattern1069_=p)):
                        return False
                return True
            _st_label_1045 = 0
            while (_st_label_1045 == 0):
                _st_label_1045 += 1
                if UniversalOpExpr_1046():
                    _st_label_1045 += 1
                else:
                    super()._label('_st_label_1045', block=True)
                    _st_label_1045 -= 1
            else:
                if (_st_label_1045 != 2):
                    continue
            if (_st_label_1045 != 2):
                break
            self.send(('done',), to=psPMine)
            self.output(((((('Running iteration ' + str(i)) + ' for orig.da implementation with processes ') + str(numOfProcesses)) + ' and requests ') + str(numOfRequests)))
            psOrig = self.new(POrig, num=numOfProcesses)
            for p in psOrig:
                self._setup(p, ((psOrig - {p}), numOfRequests))
            self._start(psOrig)
            super()._label('_st_label_1116', block=False)
            p = None

            def UniversalOpExpr_1117():
                nonlocal p
                for p in psOrig:
                    if (not PatternExpr_1130.match_iter(self._Node_ReceivedEvent_1, _BoundPattern1140_=p)):
                        return False
                return True
            _st_label_1116 = 0
            while (_st_label_1116 == 0):
                _st_label_1116 += 1
                if UniversalOpExpr_1117():
                    _st_label_1116 += 1
                else:
                    super()._label('_st_label_1116', block=True)
                    _st_label_1116 -= 1
            else:
                if (_st_label_1116 != 2):
                    continue
            if (_st_label_1116 != 2):
                break
            self.send(('done',), to=psOrig)
            self.output(((((('Running iteration ' + str(i)) + ' for spec.da implementation with processes ') + str(numOfProcesses)) + ' and requests ') + str(numOfRequests)))
            psSpec = self.new(POrig, num=numOfProcesses)
            for p in psSpec:
                self._setup(p, ((psSpec - {p}), numOfRequests))
            self._start(psSpec)
            super()._label('_st_label_1187', block=False)
            p = None

            def UniversalOpExpr_1188():
                nonlocal p
                for p in psSpec:
                    if (not PatternExpr_1201.match_iter(self._Node_ReceivedEvent_2, _BoundPattern1211_=p)):
                        return False
                return True
            _st_label_1187 = 0
            while (_st_label_1187 == 0):
                _st_label_1187 += 1
                if UniversalOpExpr_1188():
                    _st_label_1187 += 1
                else:
                    super()._label('_st_label_1187', block=True)
                    _st_label_1187 -= 1
            else:
                if (_st_label_1187 != 2):
                    continue
            if (_st_label_1187 != 2):
                break
            self.send(('done',), to=psSpec)
