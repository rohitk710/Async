# -*- generated by 1.0.12 -*-
import da
PatternExpr_229 = da.pat.TuplePattern([da.pat.ConstantPattern('respond'), da.pat.BoundPattern('_BoundPattern232_'), da.pat.FreePattern(None)])
PatternExpr_236 = da.pat.FreePattern('a')
PatternExpr_264 = da.pat.TuplePattern([da.pat.ConstantPattern('respond'), da.pat.BoundPattern('_BoundPattern267_'), da.pat.TuplePattern([da.pat.FreePattern('n2'), da.pat.FreePattern('v')])])
PatternExpr_295 = da.pat.TuplePattern([da.pat.ConstantPattern('respond'), da.pat.BoundPattern('_BoundPattern298_'), da.pat.TuplePattern([da.pat.FreePattern('n2'), da.pat.FreePattern(None)])])
PatternExpr_331 = da.pat.TuplePattern([da.pat.ConstantPattern('respond'), da.pat.BoundPattern('_BoundPattern334_'), da.pat.FreePattern(None)])
PatternExpr_338 = da.pat.FreePattern('a')
PatternExpr_374 = da.pat.TuplePattern([da.pat.ConstantPattern('done')])
PatternExpr_379 = da.pat.TuplePattern([da.pat.FreePattern(None), da.pat.TuplePattern([da.pat.FreePattern(None), da.pat.FreePattern(None), da.pat.FreePattern(None)]), da.pat.TuplePattern([da.pat.ConstantPattern('done')])])
PatternExpr_429 = da.pat.TuplePattern([da.pat.ConstantPattern('prepare'), da.pat.FreePattern('n')])
PatternExpr_436 = da.pat.FreePattern('p')
PatternExpr_442 = da.pat.TuplePattern([da.pat.ConstantPattern('respond'), da.pat.FreePattern('n2'), da.pat.FreePattern(None)])
PatternExpr_471 = da.pat.TuplePattern([da.pat.ConstantPattern('accepted'), da.pat.FreePattern('n'), da.pat.FreePattern('v')])
PatternExpr_497 = da.pat.TuplePattern([da.pat.ConstantPattern('accepted'), da.pat.FreePattern('n'), da.pat.FreePattern(None)])
PatternExpr_532 = da.pat.TuplePattern([da.pat.ConstantPattern('accept'), da.pat.FreePattern('n'), da.pat.FreePattern('v')])
PatternExpr_545 = da.pat.TuplePattern([da.pat.ConstantPattern('respond'), da.pat.FreePattern('n2'), da.pat.FreePattern(None)])
PatternExpr_623 = da.pat.TuplePattern([da.pat.ConstantPattern('accepted'), da.pat.FreePattern('n'), da.pat.FreePattern('v')])
PatternExpr_649 = da.pat.TuplePattern([da.pat.ConstantPattern('accepted'), da.pat.BoundPattern('_BoundPattern652_'), da.pat.BoundPattern('_BoundPattern653_')])
PatternExpr_656 = da.pat.FreePattern('a')
_config_object = {}
import sys
from random import randint
controller = da.import_da('controller')

class Proposer(controller.Controllee, da.DistProcess):

    def __init__(self, procimpl, props):
        super().__init__(procimpl, props)
        self._ProposerReceivedEvent_0 = []
        self._ProposerReceivedEvent_1 = []
        self._ProposerReceivedEvent_2 = []
        self._ProposerReceivedEvent_3 = []
        self._ProposerReceivedEvent_4 = []
        self._events.extend([da.pat.EventPattern(da.pat.ReceivedEvent, '_ProposerReceivedEvent_0', PatternExpr_229, sources=[PatternExpr_236], destinations=None, timestamps=None, record_history=True, handlers=[]), da.pat.EventPattern(da.pat.ReceivedEvent, '_ProposerReceivedEvent_1', PatternExpr_264, sources=None, destinations=None, timestamps=None, record_history=True, handlers=[]), da.pat.EventPattern(da.pat.ReceivedEvent, '_ProposerReceivedEvent_2', PatternExpr_295, sources=None, destinations=None, timestamps=None, record_history=True, handlers=[]), da.pat.EventPattern(da.pat.ReceivedEvent, '_ProposerReceivedEvent_3', PatternExpr_331, sources=[PatternExpr_338], destinations=None, timestamps=None, record_history=True, handlers=[]), da.pat.EventPattern(da.pat.ReceivedEvent, '_ProposerReceivedEvent_4', PatternExpr_374, sources=None, destinations=None, timestamps=None, record_history=True, handlers=[])])

    def setup(self, ctl, acceptors, timeout, **rest_827):
        super().setup(ctl=ctl, acceptors=acceptors, timeout=timeout, **rest_827)
        self._state.ctl = ctl
        self._state.acceptors = acceptors
        self._state.timeout = timeout
        super().setup(self._state.ctl)
        self._state.n = None
        self._state.majority = self._state.acceptors

    @controller.run
    def run(self):
        while (not PatternExpr_379.match_iter(self._ProposerReceivedEvent_4, SELF_ID=self._id)):
            self.to_consent()

    def to_consent(self):
        self._state.n = ((0, self._id) if (self._state.n == None) else ((self._state.n[0] + 1), self._id))
        self.send(('prepare', self._state.n), to=self._state.majority)
        super()._label('_st_label_224', block=False)
        _st_label_224 = 0
        self._timer_start()
        while (_st_label_224 == 0):
            _st_label_224 += 1
            if (len({a for (_, (_, _, a), (_ConstantPattern247_, _BoundPattern249_, _)) in self._ProposerReceivedEvent_0 if (_ConstantPattern247_ == 'respond') if (_BoundPattern249_ == self._state.n)}) > (len(self._state.acceptors) / 2)):
                v = self.anyof(({v for (_, _, (_ConstantPattern283_, _BoundPattern285_, (n2, v))) in self._ProposerReceivedEvent_1 if (_ConstantPattern283_ == 'respond') if (_BoundPattern285_ == self._state.n) if (n2 == max({n2 for (_, _, (_ConstantPattern312_, _BoundPattern314_, (n2, _))) in self._ProposerReceivedEvent_2 if (_ConstantPattern312_ == 'respond') if (_BoundPattern314_ == self._state.n)}))} or {randint(1, 100)}))
                responded = {a for (_, (_, _, a), (_ConstantPattern349_, _BoundPattern351_, _)) in self._ProposerReceivedEvent_3 if (_ConstantPattern349_ == 'respond') if (_BoundPattern351_ == self._state.n)}
                self.send(('accept', self._state.n, v), to=responded)
                _st_label_224 += 1
            elif self._timer_expired:
                pass
                _st_label_224 += 1
            else:
                super()._label('_st_label_224', block=True, timeout=self._state.timeout)
                _st_label_224 -= 1

    def anyof(self, s):
        return (next(iter(s)) if s else None)

@controller.rugroup('bo_measured')
class Acceptor(controller.Controllee, da.DistProcess):

    def __init__(self, procimpl, props):
        super().__init__(procimpl, props)
        self._AcceptorSentEvent_1 = []
        self._AcceptorSentEvent_2 = []
        self._AcceptorSentEvent_3 = []
        self._AcceptorSentEvent_5 = []
        self._events.extend([da.pat.EventPattern(da.pat.ReceivedEvent, '_AcceptorReceivedEvent_0', PatternExpr_429, sources=[PatternExpr_436], destinations=None, timestamps=None, record_history=None, handlers=[self._Acceptor_handler_428]), da.pat.EventPattern(da.pat.SentEvent, '_AcceptorSentEvent_1', PatternExpr_442, sources=None, destinations=None, timestamps=None, record_history=True, handlers=[]), da.pat.EventPattern(da.pat.SentEvent, '_AcceptorSentEvent_2', PatternExpr_471, sources=None, destinations=None, timestamps=None, record_history=True, handlers=[]), da.pat.EventPattern(da.pat.SentEvent, '_AcceptorSentEvent_3', PatternExpr_497, sources=None, destinations=None, timestamps=None, record_history=True, handlers=[]), da.pat.EventPattern(da.pat.ReceivedEvent, '_AcceptorReceivedEvent_4', PatternExpr_532, sources=None, destinations=None, timestamps=None, record_history=None, handlers=[self._Acceptor_handler_531]), da.pat.EventPattern(da.pat.SentEvent, '_AcceptorSentEvent_5', PatternExpr_545, sources=None, destinations=None, timestamps=None, record_history=True, handlers=[])])

    def setup(self, ctl, learners, **rest_827):
        super().setup(ctl=ctl, learners=learners, **rest_827)
        self._state.ctl = ctl
        self._state.learners = learners
        super().setup(self._state.ctl)

    @controller.run
    def run(self):
        return 0

    def anyof(self, s):
        "return any element of set s if s is not empty or 'None' otherwise"
        return (next(iter(s)) if s else None)

    def _Acceptor_handler_428(self, n, p):
        n2 = None

        def UniversalOpExpr_440():
            nonlocal n2
            for (_, _, (_ConstantPattern458_, n2, _)) in self._AcceptorSentEvent_1:
                if (_ConstantPattern458_ == 'respond'):
                    if (not (n > n2)):
                        return False
            return True
        if UniversalOpExpr_440():
            maxprop = self.anyof({(n, v) for (_, _, (_ConstantPattern487_, n, v)) in self._AcceptorSentEvent_2 if (_ConstantPattern487_ == 'accepted') if (n == max({n for (_, _, (_ConstantPattern512_, n, _)) in self._AcceptorSentEvent_3 if (_ConstantPattern512_ == 'accepted')}))})
            self.send(('respond', n, maxprop), to=p)
    _Acceptor_handler_428._labels = None
    _Acceptor_handler_428._notlabels = None

    def _Acceptor_handler_531(self, n, v):
        n2 = None

        def ExistentialOpExpr_543():
            nonlocal n2
            for (_, _, (_ConstantPattern561_, n2, _)) in self._AcceptorSentEvent_5:
                if (_ConstantPattern561_ == 'respond'):
                    if (n2 > n):
                        return True
            return False
        if (not ExistentialOpExpr_543()):
            self.send(('accepted', n, v), to=self._state.learners)
    _Acceptor_handler_531._labels = None
    _Acceptor_handler_531._notlabels = None

class Learner(controller.Controllee, da.DistProcess):

    def __init__(self, procimpl, props):
        super().__init__(procimpl, props)
        self._LearnerReceivedEvent_0 = []
        self._LearnerReceivedEvent_1 = []
        self._events.extend([da.pat.EventPattern(da.pat.ReceivedEvent, '_LearnerReceivedEvent_0', PatternExpr_623, sources=None, destinations=None, timestamps=None, record_history=True, handlers=[]), da.pat.EventPattern(da.pat.ReceivedEvent, '_LearnerReceivedEvent_1', PatternExpr_649, sources=[PatternExpr_656], destinations=None, timestamps=None, record_history=True, handlers=[])])

    def setup(self, ctl, acceptors, proposer, timeout, **rest_827):
        super().setup(ctl=ctl, acceptors=acceptors, proposer=proposer, timeout=timeout, **rest_827)
        self._state.ctl = ctl
        self._state.acceptors = acceptors
        self._state.proposer = proposer
        self._state.timeout = timeout
        super().setup(self._state.ctl)

    @controller.run
    def run(self):
        self.learn()
        self.send(('done',), to=self._state.proposer)

    def learn(self):
        super()._label('_st_label_620', block=False)
        v = n = a = None

        def ExistentialOpExpr_621():
            nonlocal v, n, a
            for (_, _, (_ConstantPattern640_, n, v)) in self._LearnerReceivedEvent_0:
                if (_ConstantPattern640_ == 'accepted'):
                    if (len({a for (_, (_, _, a), (_ConstantPattern667_, _BoundPattern669_, _BoundPattern670_)) in self._LearnerReceivedEvent_1 if (_ConstantPattern667_ == 'accepted') if (_BoundPattern669_ == n) if (_BoundPattern670_ == v)}) > (len(self._state.acceptors) / 2)):
                        return True
            return False
        _st_label_620 = 0
        self._timer_start()
        while (_st_label_620 == 0):
            _st_label_620 += 1
            if ExistentialOpExpr_621():
                self.output('learned', n, v)
                _st_label_620 += 1
            elif self._timer_expired:
                self.output('failed learning anything')
                _st_label_620 += 1
            else:
                super()._label('_st_label_620', block=True, timeout=self._state.timeout)
                _st_label_620 -= 1

class Node_(da.NodeProcess):

    def __init__(self, procimpl, props):
        super().__init__(procimpl, props)
        self._events.extend([])

    def run(self):
        nacceptors = (int(sys.argv[1]) if (len(sys.argv) > 1) else 3)
        nproposers = (int(sys.argv[2]) if (len(sys.argv) > 2) else 3)
        timeout = (int(sys.argv[3]) if (len(sys.argv) > 3) else 1)
        ctl = self.new(controller.Controller, num=1)
        self._setup(ctl, ((nacceptors + (nproposers * 2)),))
        self._start(ctl)
        acceptors = self.new(Acceptor, num=nacceptors)
        proposers = self.new(Proposer, (ctl, acceptors, timeout), num=nproposers)
        learners = self.new(Learner, num=nproposers)
        for a in acceptors:
            self._setup(a, (ctl, learners))
        for (p, l) in zip(proposers, learners):
            self._setup(l, (ctl, acceptors, p, timeout))
        self._start(((acceptors | proposers) | learners))
