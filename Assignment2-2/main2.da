import sys
import time
config(channnel is fifo, clock is lamport)

class P(process):
    def setup(s:set, nrequests:int):
        self.q = set()
        self.timedOut = 0
        self.minimumTimeStamp = 100000


    # Step1: To request the resource, process Pi sends the message Tm:Pi requests resource to every other process, 
    # and puts that message on its request queue, where Tm is the timestamp of the message.
    
    def request():
        c = logical_clock()
        send(('request', c, self), to= s)
        q.add(('request', c , self))
        

    # Once a process receives a request, it adds it in it's queue
    def receive(msg= ('request', c2, p)):
        -- receive
        q.add(('request', c2, p))
        send(('ack', logical_clock(), self), to= p)

    #For entering the CS we check in that process's queue for it's earliest call and verify CS entering condition for it and if it satisfies we remove it.
    def cs():
        -- cs
        minimumTimeStamp = 100000
        for (tag, c, p2) in q:
            if(tag == 'request' and p2==self and c < minimumTimeStamp):
                minimumTimeStamp = c;
        c = minimumTimeStamp
        
        if await(each(('request', c2, p)in q, has= (c2,p)==(c, self) or (c,self) < (c2, p)) and each(p in s, has= some(received(('ack', c2, _p)), has= c2 > c))):
            output('In CS of process: ' + str(self) + ' with timestamp : '+ str(c) + ' at time:' + str(logical_clock()))
        elif timeout(15):
            timedOut = timedOut + 1
            output ('Timed out for process: ' + str(self))        

    # For release we select any request from the self's queue and remove it.
    def release():
        -- release
        for(tag, c, p) in q:
            if(tag == 'request' and p==self):
                q.remove(('request', c, self))
                send(('release', logical_clock(), self), to= s)
                break

    # Once process receives the release request, it searches for any request message in its queue from the sender's process and removes it.
    def receive(msg= ('release', c, p)):
        for x in setof(('request', c, p), ('request', c, _p) in q):
            q.remove(x)
            break

    def run():
        for i in range(nrequests):
            request()
            cs()
            request()
            release()

        send(('done', self), to= parent())
        await(received(('done',), from_=parent()))
        output ('Number of requests timed out for process ' + str(self) +' is :'+ str(timedOut))


def main():
    nprocs = int(sys.argv[1]) if len(sys.argv) > 1 else 10
    nrequests = int(sys.argv[2]) if len(sys.argv) > 2 else 10

    nrequests = int(nrequests/2);

    ps = new(P, num=nprocs)
    for p in ps: setup(p, (ps-{p}, nrequests))
    start(ps)
    await(each(p in ps, has=received(('done', p))))
    send(('done',), to=ps)
    